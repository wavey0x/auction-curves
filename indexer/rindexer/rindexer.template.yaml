# ============================================================================
# RINDEXER LOCAL CONFIGURATION - FACTORY DISCOVERY MODE
# ============================================================================
# Used by: ./run.sh dev (generates rindexer.yaml from this template)
# Purpose: Index auction events from local Anvil blockchain (chain_id: 31337)
# Mode: no-code (automatic table generation + webhook streams for business logic)

name: auction-local
description: "Indexes all events from Dutch auction contracts on local Anvil network using factory discovery"
project_type: no-code

# ============================================================================
# DATA ARCHITECTURE - UNIFIED TABLE APPROACH
# ============================================================================
# Layer 1: Rindexer Auto-Generated Tables (Raw Events - Unified per Type)
#   - deployed_new_auction      ← DeployedNewAuction events (both factories)
#   - auction_enabled           ← AuctionEnabled events (ALL modern auctions)
#   - auction_disabled          ← AuctionDisabled events (ALL modern auctions)
#   - auction_kicked            ← AuctionKicked events (ALL modern auctions)
#   - updated_starting_price    ← UpdatedStartingPrice events (ALL modern auctions)
#   - updated_step_decay_rate   ← UpdatedStepDecayRate events (ALL modern auctions)
#   - legacy_auction_enabled    ← AuctionEnabled events (ALL legacy auctions)
#   - legacy_auction_disabled   ← AuctionDisabled events (ALL legacy auctions)
#   - legacy_auction_kicked     ← AuctionKicked events (ALL legacy auctions)
#   - legacy_auction_updated_starting_price ← UpdatedStartingPrice events (ALL legacy auctions)
#
# Layer 2: Custom Business Logic Tables (via webhook → API → PostgreSQL)
#   - auctions                  ← Main auction contracts table
#   - auction_rounds            ← Processed rounds with incremental IDs
#   - auction_sales             ← Processed sales with calculations
#   - tokens                    ← Token metadata cache
#   - price_history             ← Time-series price data
#
# Why this approach?
# - Factory pattern automatically discovers ALL deployed auctions
# - Single unified table per event type (not per individual contract)
# - Scalable: New auctions are automatically indexed without config changes
# - Raw events preserved + processed data optimized for UI

# Local network only
networks:
  - name: local
    chain_id: 31337
    rpc: http://localhost:8545
    compute_units_per_second: 330
    disable_logs_bloom_checks: true

# Storage configuration
storage:
  postgres:
    enabled: true
    connection_string: postgresql://wavey@localhost:5432/auction
    # Rindexer will automatically create unified tables based on contract names

  csv:
    enabled: false

# Global configuration
global:
  start_block: 0
  # end_block: # Empty for live indexing

# ============================================================================
# CONTRACT DEFINITIONS - FACTORY DISCOVERY PATTERN
# ============================================================================
# NOTE: These contracts are deployed by ./run.sh dev automatically
# Factory addresses are replaced from deployment_info.json

contracts:
  # ============================================================================
  # FACTORY CONTRACTS - Track Deployment Events
  # ============================================================================
  
  # AuctionFactory contract - deploys new Auction instances (v0.1.0)
  - name: AuctionFactory
    abi: "./abis/AuctionFactory.json"
    include_events:
      - DeployedNewAuction  # → deployed_new_auction table
    details:
      - network: local
        address: "{{MODERN_FACTORY_ADDRESS}}"
        start_block: 0

  # LegacyAuctionFactory contract - deploys legacy Auction instances (v0.0.1)
  - name: LegacyAuctionFactory
    abi: "./abis/LegacyAuctionFactory.json"
    include_events:
      - DeployedNewAuction  # → deployed_new_auction table
    details:
      - network: local
        address: "{{LEGACY_FACTORY_ADDRESS}}"
        start_block: 0

  # ============================================================================
  # DYNAMIC AUCTION CONTRACT DISCOVERY - FACTORY PATTERN
  # ============================================================================
  # This automatically discovers and indexes ALL auctions deployed by factories!
  # Using the correct structure provided by user for factory discovery
  
  # Modern Auction contracts (v0.1.0) - Unified table for ALL modern auctions
  - name: Auction
    abi: "./abis/Auction.json"

    # With a factory, events belong on the contract (not inside details)
    include_events:
      - AuctionEnabled
      - AuctionDisabled
      - AuctionKicked
      - UpdatedStartingPrice
      - UpdatedStepDecayRate

    # Webhooks live under the contract (not inside details)
    streams:
      webhooks:
        - endpoint: "http://localhost:8000/webhook/process-event"
          shared_secret: "dev_webhook_secret"
          networks: ["local"]
          events:
            - event_name: AuctionEnabled
            - event_name: AuctionDisabled
            - event_name: AuctionKicked
            - event_name: UpdatedStartingPrice
            - event_name: UpdatedStepDecayRate

    details:
      - network: local
        start_block: 0
        factory:
          name: "AuctionFactory"
          address: "{{MODERN_FACTORY_ADDRESS}}"
          abi: "./abis/AuctionFactory.json"
          event_name: "DeployedNewAuction"
          input_name: "auction"

  # Legacy Auction contracts (v0.0.1) - Unified table for ALL legacy auctions
  - name: LegacyAuction
    abi: "./abis/LegacyAuction.json"

    # With a factory, events belong on the contract (not inside details)
    include_events:
      - AuctionEnabled
      - AuctionDisabled
      - AuctionKicked
      - UpdatedStartingPrice

    # Webhooks live under the contract (not inside details)
    streams:
      webhooks:
        - endpoint: "http://localhost:8000/webhook/process-event"
          shared_secret: "dev_webhook_secret"
          networks: ["local"]
          events:
            - event_name: AuctionEnabled
            - event_name: AuctionDisabled
            - event_name: AuctionKicked
            - event_name: UpdatedStartingPrice

    details:
      - network: local
        start_block: 0
        factory:
          name: "LegacyAuctionFactory"
          address: "{{LEGACY_FACTORY_ADDRESS}}"
          abi: "./abis/LegacyAuctionFactory.json"
          event_name: "DeployedNewAuction"
          input_name: "auction"

# Expected database tables (created automatically by Rindexer):
# Factory Events:
#   - deployed_new_auction (both modern & legacy factory deployments)
#
# Modern Auction Events (unified tables for ALL modern auctions):
#   - auction_enabled (all modern auction enables)
#   - auction_disabled (all modern auction disables)
#   - auction_kicked (all modern auction kicks)
#   - updated_starting_price (all modern auction price updates)
#   - updated_step_decay_rate (all modern auction decay updates)
#
# Legacy Auction Events (unified tables for ALL legacy auctions):
#   - legacy_auction_enabled (all legacy auction enables)
#   - legacy_auction_disabled (all legacy auction disables)
#   - legacy_auction_kicked (all legacy auction kicks)
#   - legacy_auction_updated_starting_price (all legacy auction price updates)
#
# All tables will include chain_id = 31337 for local Anvil network

# ============================================================================
# WEBHOOK STREAMS - CUSTOM BUSINESS LOGIC (MOVED TO CONTRACT LEVEL)
# ============================================================================
# Purpose: Send events to API server for custom processing
# Flow: Rindexer → Webhook → FastAPI → Custom database tables
# 
# This is where auction_rounds, auction_sales, and other business logic
# tables get populated with calculated/derived data
#
# NOTE: Webhooks are now defined under each contract (Auction & LegacyAuction)
# instead of top-level streams for proper factory pattern integration