# ============================================================================
# RINDEXER MULTI-NETWORK CONFIGURATION - PRODUCTION MODE
# ============================================================================
# Used by: ./run.sh prod
# Purpose: Index auction events across 5 mainnet networks simultaneously
# Mode: no-code (automatic table generation + webhook streams for business logic)

name: auction-multi
description: "Indexes all events from Dutch auction contracts across multiple networks"
project_type: no-code

# ============================================================================
# MULTI-CHAIN ARCHITECTURE
# ============================================================================
# All events stored in same database tables with chain_id differentiation:
# - Chain ID 1: Ethereum Mainnet
# - Chain ID 137: Polygon  
# - Chain ID 42161: Arbitrum One
# - Chain ID 10: Optimism
# - Chain ID 8453: Base
#
# Single database for all networks enables:
# - Cross-chain analytics and comparisons
# - Unified API endpoints for multi-network data
# - Consistent user experience across all chains

# Multi-Network configurations
networks:
  # Ethereum Mainnet
  - name: ethereum
    chain_id: 1
    rpc: ${ETHEREUM_RPC_URL}
    compute_units_per_second: 330
    disable_logs_bloom_checks: false

  # Polygon
  - name: polygon
    chain_id: 137
    rpc: ${POLYGON_RPC_URL}
    compute_units_per_second: 330
    disable_logs_bloom_checks: false

  # Arbitrum One
  - name: arbitrum
    chain_id: 42161
    rpc: ${ARBITRUM_RPC_URL}
    compute_units_per_second: 330
    disable_logs_bloom_checks: false

  # Optimism
  - name: optimism
    chain_id: 10
    rpc: ${OPTIMISM_RPC_URL}
    compute_units_per_second: 330
    disable_logs_bloom_checks: false

  # Base
  - name: base
    chain_id: 8453
    rpc: ${BASE_RPC_URL}
    compute_units_per_second: 330
    disable_logs_bloom_checks: false

# Storage configuration - single database for all networks
storage:
  postgres:
    enabled: true
    connection_string: ${DATABASE_URL}
    # Rindexer will automatically create tables with chain_id differentiation

  csv:
    enabled: false

# Global configuration
global:
  start_block: 0  # Will be overridden per network
  # end_block: # Empty for live indexing

# ============================================================================
# CONTRACT DEFINITIONS - MULTI-NETWORK FACTORIES + DYNAMIC DISCOVERY
# ============================================================================
# Each network has its own factory contract that deploys auction instances
# Rindexer automatically discovers and indexes all auctions from all factories

contracts:
  # ============================================================================
  # FACTORY CONTRACTS - One per network
  # ============================================================================
  
  # Ethereum AuctionFactory
  - name: EthereumAuctionFactory
    abi: "./abis/AuctionFactory.json"
    details:
      - network: ethereum
        address: ${ETHEREUM_FACTORY_ADDRESS}
        start_block: ${ETHEREUM_START_BLOCK}
        include_events:
          - DeployedNewAuction

  # Polygon AuctionFactory
  - name: PolygonAuctionFactory
    abi: "./abis/AuctionFactory.json"
    details:
      - network: polygon
        address: ${POLYGON_FACTORY_ADDRESS}
        start_block: ${POLYGON_START_BLOCK}
        include_events:
          - DeployedNewAuction

  # Arbitrum AuctionFactory
  - name: ArbitrumAuctionFactory
    abi: "./abis/AuctionFactory.json"
    details:
      - network: arbitrum
        address: ${ARBITRUM_FACTORY_ADDRESS}
        start_block: ${ARBITRUM_START_BLOCK}
        include_events:
          - DeployedNewAuction

  # Optimism AuctionFactory
  - name: OptimismAuctionFactory
    abi: "./abis/AuctionFactory.json"
    details:
      - network: optimism
        address: ${OPTIMISM_FACTORY_ADDRESS}
        start_block: ${OPTIMISM_START_BLOCK}
        include_events:
          - DeployedNewAuction

  # Base AuctionFactory
  - name: BaseAuctionFactory
    abi: "./abis/AuctionFactory.json"
    details:
      - network: base
        address: ${BASE_FACTORY_ADDRESS}
        start_block: ${BASE_START_BLOCK}
        include_events:
          - DeployedNewAuction

  # ============================================================================
  # DYNAMIC AUCTION CONTRACT DISCOVERY - ALL NETWORKS
  # ============================================================================
  # Single configuration automatically discovers auctions from ALL factory contracts
  # Rindexer will index every auction deployed by any of the 5 factories above
  
  - name: Auction
    abi: "./abis/Auction.json"
    details:
      # Ethereum auctions (deployed by EthereumAuctionFactory)
      - network: ethereum
        factory:
          name: EthereumAuctionFactory
          address: ${ETHEREUM_FACTORY_ADDRESS}
          abi: "./abis/AuctionFactory.json"
          event_name: DeployedNewAuction
          input_name: "auction"
        start_block: ${ETHEREUM_START_BLOCK}
        include_events:
          - AuctionEnabled
          - AuctionDisabled  
          - AuctionKicked
          - AuctionSale
          - UpdatedStartingPrice
          - UpdatedStepDecayRate
      
      # Polygon auctions (deployed by PolygonAuctionFactory)  
      - network: polygon
        factory:
          name: PolygonAuctionFactory
          address: ${POLYGON_FACTORY_ADDRESS}
          abi: "./abis/AuctionFactory.json"
          event_name: DeployedNewAuction
          input_name: "auction"
        start_block: ${POLYGON_START_BLOCK}
        include_events:
          - AuctionEnabled
          - AuctionDisabled
          - AuctionKicked
          - UpdatedStartingPrice
          - UpdatedStepDecayRate
      
      # Arbitrum auctions (deployed by ArbitrumAuctionFactory)
      - network: arbitrum
        factory:
          name: ArbitrumAuctionFactory
          address: ${ARBITRUM_FACTORY_ADDRESS}
          abi: "./abis/AuctionFactory.json"
          event_name: DeployedNewAuction
          input_name: "auction"
        start_block: ${ARBITRUM_START_BLOCK}
        include_events:
          - AuctionEnabled
          - AuctionDisabled
          - AuctionKicked
          - UpdatedStartingPrice
          - UpdatedStepDecayRate
      
      # Optimism auctions (deployed by OptimismAuctionFactory)
      - network: optimism
        factory:
          name: OptimismAuctionFactory
          address: ${OPTIMISM_FACTORY_ADDRESS}
          abi: "./abis/AuctionFactory.json"
          event_name: DeployedNewAuction
          input_name: "auction"
        start_block: ${OPTIMISM_START_BLOCK}
        include_events:
          - AuctionEnabled
          - AuctionDisabled
          - AuctionKicked
          - UpdatedStartingPrice
          - UpdatedStepDecayRate
      
      # Base auctions (deployed by BaseAuctionFactory)
      - network: base
        factory:
          name: BaseAuctionFactory
          address: ${BASE_FACTORY_ADDRESS}
          abi: "./abis/AuctionFactory.json"
          event_name: DeployedNewAuction
          input_name: "auction"
        start_block: ${BASE_START_BLOCK}
        include_events:
          - AuctionEnabled
          - AuctionDisabled
          - AuctionKicked
          - UpdatedStartingPrice
          - UpdatedStepDecayRate

# Expected database tables (created automatically by Rindexer):
# - deployed_new_auction (with chain_id, auction address, want token, etc.)
# - auction_enabled (when tokens are enabled for auction)
# - auction_disabled (when tokens are disabled)
# - auction_kicked (when rounds are kicked)
# - updated_starting_price (when prices are updated)
# - updated_step_decay_rate (when decay rates are updated)

# All tables will include:
# - chain_id: Network identifier
# - block_number: Block where event occurred
# - transaction_hash: Transaction hash
# - log_index: Event index within transaction
# - timestamp: Block timestamp
# - Event-specific fields

# ============================================================================
# WEBHOOK STREAMS - MULTI-NETWORK BUSINESS LOGIC
# ============================================================================
# Purpose: Send events from ALL networks to API for unified processing
# Flow: Multi-network events → Webhook → FastAPI → Single database
#
# Benefits of unified processing:
# - Single API handler for all networks
# - Consistent business logic across chains
# - Cross-chain analytics and comparisons

streams:
  - name: multi_network_business_logic
    type: webhook
    url: "http://localhost:8000/webhook/process-event"
    events:
      - DeployedNewAuction    # → Creates auction_parameters (all networks)
      - AuctionKicked         # → Creates auction_rounds (all networks)
      - AuctionEnabled        # → Updates auction state (all networks)  
      - AuctionDisabled       # → Updates auction state (all networks)
      - UpdatedStartingPrice  # → Updates auction_parameters (all networks)
      - UpdatedStepDecayRate  # → Updates auction_parameters (new contracts only)
    # No chain_id filter - process events from all 5 networks
    timeout: 30
    retries: 3

# ============================================================================
# AUTOMATIC SCALABILITY
# ============================================================================
# ✅ SOLVED: No manual configuration needed!
#
# This configuration automatically handles:
# - Unlimited number of factory contracts per network
# - All auctions deployed by any factory (past, present, future)
# - New auctions discovered in real-time without restart
# - Cross-network auction indexing with unified database
# 
# Benefits:
# - Deploy new factories → automatically indexed
# - Deploy new auctions → automatically indexed  
# - Zero configuration drift
# - Scales to thousands of auctions across all networks